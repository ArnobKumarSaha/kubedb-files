

# Install mongodump or mongorestore command 
apt update
apt install curl -y
curl https://downloads.mongodb.com/compass/mongodb-mongosh_1.10.1_amd64.deb -o mongo-tools.deb
apt install ./mongo-tools.deb


# create 
mongo -u root -p $MONGO_INITDB_ROOT_PASSWORD
use admin
db.createRole(
   {
     role: "myClusterwideAdmin",
     privileges: [
       { resource: { db: "", collection: "" }, actions: [ "find" ] }
     ],
     roles: [
       { role: "read", db: "admin" }
     ]
   },
)

db.createCollection("temp.users")
db.createCollection("temp.roles")
exit


# Backup Restore
mongodump -u root -p $MONGO_INITDB_ROOT_PASSWORD
mongorestore -u root -p $MONGO_INITDB_ROOT_PASSWORD --drop dump

/usr/bin/mongo admin --host rs/rsmg5-0.rsmg5-pods.demo.svc:27017,rsmg5-1.rsmg5-pods.demo.svc:27017,rsmg5-2.rsmg5-pods.demo.svc:27017 --quiet --eval JSON.stringify(db.getRole("interalUseOnlyOplogRestore"))


# TLS command

mongo --tls --tlsCAFile /var/run/mongodb/tls/ca.crt --tlsCertificateKeyFile /var/run/mongodb/tls/client.pem admin --host localhost --authenticationMechanism MONGODB-X509 --authenticationDatabase='$external' -u "CN=root,OU=client,O=kubedb" --quiet



# _mergeAuthzCollections

db.adminCommand({
  _mergeAuthzCollections: 1,
  db: "admin",
  tempRolesCollection: "temp.roles",
  tempUsersCollection: "temp.users",
  writeConcern: {w: "majority"},
})
  drop: true,


db.runCommand({createRole:"super",privileges:[{resource:{anyResource:true},actions:["anyAction"]}],roles: []})
db.runCommand({createUser: "super" ,pwd: "12345", roles:[{role:"root", db:"admin"},"__system","super","backup"]})



# Commands generated for envoy-proxy
mongosh admin --host 139-144-127-154.ip.linodeusercontent.com --port 27017 --authenticationDatabase=admin --username=root --password=''
mongosh "mongodb://root:qb*53L9TpGpx~s~b@139-144-127-154.ip.linodeusercontent.com:27017/admin?directConnection=true&authSource=admin&appName=mongosh+2.0.1&serverSelectionTimeoutMS=200000"

mongosh --tls --tlsCAFile ./ca.crt --tlsCertificateKeyFile ./client.pem admin --host 139-162-26-203.ip.linodeusercontent.com --port 27017 --authenticationMechanism MONGODB-X509 --authenticationDatabase='$external'
mongosh "mongodb://139-162-26-203.ip.linodeusercontent.com:27017/admin?directConnection=true&tls=true&tlsCAFile=.%2Fca.crt&tlsCertificateKeyFile=.%2Fclient.pem&authMechanism=MONGODB-X509&authSource=%24external&appName=mongosh+2.0.1&serverSelectionTimeoutMS=200000"




db.runCommand(
   {
     dbStats: 1,
     scale: 1048576
   }
)

for a in $(kubectl get pods -n demo | grep -v NAME | awk '{print $1}') ; do echo " "; echo "== ${a} Pd Volume Size =="; kubectl -n demo exec -it ${a} -- df -Th | egrep 'Type|/data/db' ; done












admin> db.currentOp(true).inprog.forEach(function(d){if(d.active)printjson(d)})
{
  type: 'op',
  host: 'mg-prefertls-0:27017',
  desc: 'conn3921',
  connectionId: 3921,
  client: '127.0.0.1:44236',
  appName: 'mongosh 1.8.2',
  clientMetadata: {
    application: {
      name: 'mongosh 1.8.2'
    },
    driver: {
      name: 'nodejs|mongosh',
      version: '5.3.0|1.8.2'
    },
    platform: 'Node.js v16.19.1, LE',
    os: {
      name: 'linux',
      architecture: 'x64',
      version: '5.10.0-21-cloud-amd64',
      type: 'Linux'
    }
  },
  active: true,
  currentOpTime: '2023-09-20T13:17:53.772+00:00',
  effectiveUsers: [
    {
      user: 'CN=root,OU=client,O=kubedb',
      db: '$external'
    }
  ],
  threaded: true,
  opid: 64534,
  lsid: {
    id: new UUID("a6aa11dc-4049-4ced-ba0c-5473e58fccea"),
    uid: Binary(Buffer.from("ae4b8a817eacdaf5916f919d7d7325a5d9900156bf7c75e992e0ec06edb2a94c", "hex"), 0)
  },
  secs_running: Long("0"),
  microsecs_running: Long("124"),
  op: 'command',
  ns: 'admin.$cmd.aggregate',
  command: {
    aggregate: 1,
    pipeline: [
      {
        '$currentOp': {
          allUsers: true,
          idleConnections: true,
          truncateOps: false
        }
      }
    ],
    cursor: {},
    lsid: {
      id: new UUID("a6aa11dc-4049-4ced-ba0c-5473e58fccea")
    },
    '$db': 'admin'
  },
  numYields: 0,
  locks: {},
  waitingForLock: false,
  lockStats: {},
  waitingForFlowControl: false,
  flowControlStats: {}
}
{
  type: 'op',
  host: 'mg-prefertls-0:27017',
  desc: 'conn3919',
  connectionId: 3919,
  client: '127.0.0.1:44230',
  appName: 'mongosh 1.8.2',
  clientMetadata: {
    application: {
      name: 'mongosh 1.8.2'
    },
    driver: {
      name: 'nodejs|mongosh',
      version: '5.3.0|1.8.2'
    },
    platform: 'Node.js v16.19.1, LE',
    os: {
      name: 'linux',
      architecture: 'x64',
      version: '5.10.0-21-cloud-amd64',
      type: 'Linux'
    }
  },
  active: true,
  currentOpTime: '2023-09-20T13:17:53.772+00:00',
  threaded: true,
  opid: 64440,
  secs_running: Long("7"),
  microsecs_running: Long("7650399"),
  op: 'command',
  ns: 'admin.$cmd',
  command: {
    hello: 1,
    maxAwaitTimeMS: 10000,
    topologyVersion: {
      processId: ObjectId("650ae16c9159382f1cb5f010"),
      counter: Long("0")
    },
    '$db': 'admin'
  },
  numYields: 0,
  waitingForLatch: {
    timestamp: ISODate("2023-09-20T13:17:46.221Z"),
    captureName: 'AnonymousLatch'
  },
  locks: {},
  waitingForLock: false,
  lockStats: {},
  waitingForFlowControl: false,
  flowControlStats: {}
}


db.adminCommand({
    currentOp: true,
    "$or": [{ "client": "conn246" }]
})

tcpdump -w hello.pcap -i eth0 -v